{
	"starters": [
		{
			"id": 1,
			"idCode": "darkViteSimple",
			"title": "Simple React Site",
			"description": "This is a simple one-page React site created with Vite that has Typescript and Sass already installed.",
			"featureMarkdown": "- built with **Vite**\n- **one-page** without any menu\n- dark layout\n- TypeScript\n- one **Sass** file (`index.css` is deleted)\n- *good for simple sites and basic React howto examples*",
			"githubUrl": "https://github.com/edwardtanguay/blank-vite-dark",
			"githubUrl2": "",
			"installMarkdown": "## install\n\n- download zip\n- copy all files to new directory, e.g. `/home/yourname/projects/site001`\n- open VSCode in that directory (`code .`)\n- `npm i`\n- `npm run dev`",
			"demoUrl": "",
			"updowngradeList": "add React Router menu|darkViteSimpleMenu",
			"learningMaterialList": "",
			"todoList": "",
			"hasAnimation": false
		},
		{
			"id": 2,
			"idCode": "darkViteSimpleMenu",
			"title": "React Site with Menu",
			"description": "This is a simple one-page React site created with Vite that has Typescript and Sass installed, and with React Router and a CLI that enables you to easily create pages.",
			"featureMarkdown": "- built with **Vite**\n- **React Router** menu\n- dark layout\n- TypeScript\n- one **Sass** file (`index.css` is deleted)\n- **CLI** to easily create pages (`npm run cp Info` creates info page)\n- *good for simple React sites that require a menu*",
			"githubUrl": "https://github.com/edwardtanguay/blank-vite-dark-menu",
			"githubUrl2": "",
			"installMarkdown": "## install\n\n- download zip\n- copy all files to new directory, e.g. `/home/yourname/projects/site001`\n- open VSCode in that directory (`code .`)\n- `npm i`\n- `npm run dev`",
			"demoUrl": "",
			"updowngradeList": "remove React Router menu|darkViteSimple;add useContext|blankViteDarkMenuUsecontext;add Zustand|blankViteDarkMenuZustand",
			"learningMaterialList": "",
			"todoList": "put Sass class names on each page;add 404 fixes for Vercel and Netlify (see useContext starter)",
			"hasAnimation": false
		},
		{
			"id": 3,
			"idCode": "blankViteDarkMenuUsecontext",
			"title": "React Site with Menu and useContext",
			"description": "This is a simple one-page React site created with Vite that has Typescript and Sass installed, and with React Router and a CLI that enables you to easily create pages. It also has useContext implemented with an example of loading both static and API data in useContext and using these state variables on two separate pages.",
			"featureMarkdown": "- built with **Vite**\n- **React Router** menu\n- dark layout\n- TypeScript\n- one **Sass** file (`index.css` is deleted)\n- **CLI** to easily create pages (`npm run cp Info` creates info page)\n- this site has **React Router 404 bug fixes** implemented for both Netlify (`public/_redirects` file) and Vercel (`vercel.json` file)\n- *good for any React project since state management such as useContext is useful in any site beyond the simplest demo sites*",
			"githubUrl": "https://github.com/edwardtanguay/blank-vite-dark-menu-usecontext",
			"githubUrl2": "",
			"installMarkdown": "## install\n\n- go to your projects directory\n  - e.g. `cd ~/projects`\n- in your projects directory, create your new site e.g. **site001** by cloning this project \n  - `git clone git@github.com:edwardtanguay/blank-vite-dark-menu-usecontext.git site001`\n- open your newly created site in VSCode\n  - `code site001`\n- inside VSCode, open the VSCode terminal\n  - **CTRL-`**\n- delete the connection to this repository by deleting the Git repository\n  - `rm -rf .git`\n- create a new local Git repository\n  - `git init -b main`\n- install node_modules\n  - `npm i`\n- start your site and click given link to view website\n  - `npm run dev`",
			"demoUrl": "https://blank-vite-dark-menu-usecontext.vercel.app",
			"updowngradeList": "remove useContext|darkViteSimpleMenu;swap useContext for Zustand|blankViteDarkMenuZustand",
			"learningMaterialList": "HOWTO: Implement useContext in an app with multiple pages and data sources|https://edwardtanguay.vercel.app/howtos?id=636",
			"todoList": "",
			"hasAnimation": true
		},
		{
			"id": 4,
			"idCode": "blankViteDarkMenuZustand",
			"title": "React Site with Menu and Zustand",
			"description": "This is a simple one-page React site created with Vite that has Typescript and Sass installed, and with React Router and a CLI that enables you to easily create pages. It also has Zustand as centralized state management implemented with an example of loading both static and API data the Zustand state variables on two separate pages.",
			"featureMarkdown": "- built with **Vite**\n- **React Router** menu\n- dark layout\n- TypeScript\n- one **Sass** file (`index.css` is deleted)\n- **CLI** to easily create pages (`npm run cp Info` creates info page)\n- this site has **React Router 404 bug fixes** implemented for both Netlify (`public/_redirects` file) and Vercel (`vercel.json` file)\n- *good for any React project since state management such as Zustand is useful in any site beyond the simplest demo sites*",
			"githubUrl": "https://github.com/edwardtanguay/blank-vite-dark-menu-zustand",
			"githubUrl2": "",
			"installMarkdown": "## install\n\n- go to your projects directory\n  - e.g. `cd ~/projects`\n- in your projects directory, create your new site e.g. **site001** by cloning this project \n  - `git clone git@github.com:edwardtanguay/blank-vite-dark-menu-usecontext.git site001`\n- open your newly created site in VSCode\n  - `code site001`\n- inside VSCode, open the VSCode terminal\n  - **CTRL-`**\n- delete the connection to this repository by deleting the Git repository\n  - `rm -rf .git`\n- create a new local Git repository\n  - `git init -b main`\n- install node_modules\n  - `npm i`\n- start your site and click given link to view website\n  - `npm run dev`",
			"demoUrl": "https://blank-vite-dark-menu-zustand.vercel.app",
			"updowngradeList": "remove Zustand|darkViteSimpleMenu;swap Zustand for useContext|blankViteDarkMenuUsecontext",
			"learningMaterialList": "HOWTO: Create React site that uses Zustand as a state manager|https://edwardtanguay.vercel.app/howtos?id=601",
			"todoList": "",
			"hasAnimation": false
		},
		{
			"id": 5,
			"idCode": "backendSimpleReadonlyJsonApi",
			"title": "Node/Express API with simple JSON-file data source",
			"description": "If you need to set up a quick Node/Express API, this is a good project to begin with. It has a simple MVC structure with the server.ts file kept simple with the Express routes which call the corresponding functions in the model.ts file. There is one simple example of middleware, a logger which writes to a text file each time the API is accessed. The JSON file has more data than is needed so there is a light example of data cleansing from \"raw books\" to \"book\", see the IRawBook and IBook interfaces. As all my starter examples, this API uses TypeScript and ES6 modules exclusively. To add a new data source, simply change `model.ts` by swapping out the JSON-file code with code for your data source, e.g. a MongoDB or MySQL database, etc.",
			"featureMarkdown": "- Node/Express API\n- TypeScript\n  - two interfaces: `IRawBooks`, `IBooks`\n- ES6 modules\n- three simple routes:\n  - `/` - API instructions\n  - `/books` - all books\n  - `/books/3` - book with id 3\n- simple MVC structure\n  - `server.ts` - responsible for req/res routes\n  - `model.ts` - responsible for data functions\n- simple example of custom middleware (logger)\n- `config.ts` has centralized data \n- `test.rest` used for manual testing (need [REST Client VSCode extension](https://marketplace.visualstudio.com/items?itemName=humao.rest-client))\n- cors implemented",
			"githubUrl": "https://github.com/edwardtanguay/backend-simple-readonly-json-api",
			"githubUrl2": "",
			"installMarkdown": "## install\n\n- go to your projects directory\n  - e.g. `cd ~/projects`\n- in your projects directory, create your new site e.g. **backend001** by cloning this project \n  - `git clone git@github.com:edwardtanguay/backend-simple-readonly-json-api.git backend001`\n- open your newly created site in VSCode\n  - `code backend001`\n- inside VSCode, open the VSCode terminal\n  - **CTRL-`**\n- delete the connection to this repository by deleting the Git repository\n  - `rm -rf .git`\n- create a new local Git repository\n  - `git init -b main`\n- install node_modules\n  - `npm i`\n- start your site and click given link to view website\n  - `npm run dev`",
			"demoUrl": "",
			"updowngradeList": "replace JSON data source with SQLite|sqliteReadonly",
			"learningMaterialList": "",
			"todoList": "",
			"hasAnimation": false
		},
		{
			"id": 6,
			"idCode": "sqliteReadonly",
			"title": "Fullstack React site that uses backend API with SQLite data source",
			"description": "This is an example of a fullstack app that has an API in the backend which serves data from a db.sqlite file, i.e. a SQLite database. An SQLite database has the advantage that it is simply a file which can be copied, moved and deleted like any other file yet enables an quite robust SQL experience providing the ability to have dozens or hundreds of tables, and the powerful SQL query language with JOIN, UNION, GROUP BY, DISTINCT, etc. A disadvantage of SQLite is the lack of user management including authentication/authorization, but you can handle this externally, and particularly if you have a readonly SQLite database for which all data in the database is accessible to any user, as is the case in this project, SQLite gives you a very fast solution to data querying for an API.",
			"featureMarkdown": "- **BACKEND**\n  - Node/Express API\n  - TypeScript / ES6 modules\n  - SQLite\n    - uses [better-sqlite3](https://www.npmjs.com/package/better-sqlite3)\n    - since the SQLite database is a file, i.e. has no connection string, it has to be accessed via absolute file path, this has been tested to work on Windows, Linux and Mac, see `tools.absolutifyPathAndFileName()`\n    - your can manage your SQLite database with **DB Browser**, a free application that runs on Windows/Mac/Linux`, see [HOWTO: How to install DB Browser for SQLite on Windows and Ubuntu and retrieve/change data in an SQLite database](https://edwardtanguay.vercel.app/howtos?id=574)\n  - four API routes: [https://sqlite-readonly-backend.tkserv.eu](https://sqlite-readonly-backend.tkserv.eu)\n  - MVC structure\n    - `server.ts` - responsible for req/res routes\n    - `model.ts` - responsible for data functions\n  - `test.rest` used for manual testing (need [REST Client VSCode extension](https://marketplace.visualstudio.com/items?itemName=humao.rest-client))\n  - cors implemented\n- **FRONTEND**\n  - Vite React\n  - React Router menu\n  - useContext\n  - axios",
			"githubUrl": "https://github.com/edwardtanguay/sqlite-readonly-frontend",
			"githubUrl2": "https://github.com/edwardtanguay/sqlite-readonly-backend",
			"installMarkdown": "## install\n\n- go to your projects directory\n- create a directory with the name of your site, e.g. `site001`\n\n## install backend\n\n- go to your projects directory\n- `cd site001`\n- `git clone git@github.com:edwardtanguay/sqlite-readonly-backend.git .`\n- `npm i`\n- create **.env** file\n\n```text\nPORT = 3701\n```\n\n- `npm run dev`\n\n## install frontend\n\n- go to your projects directory\n- `cd site001`\n- `git clone git@github.com:edwardtanguay/sqlite-readonly-frontend.git .`\n- `npm i`\n- create **.env** file\n\n```text\nVITE_BACKEND_URL = http://localhost:3701\n```\n\n- `npm run dev`",
			"demoUrl": "https://sqlite-readonly.tkserv.eu",
			"updowngradeList": "replace SQLite data source with JSON files|backendSimpleReadonlyJsonApi",
			"learningMaterialList": "HOWTO: How to set up and use SQLite on Windows and Ubuntu|https://edwardtanguay.vercel.app/howtos?id=575;HOWTO: How to install DB Browser for SQLite on Windows and Ubuntu and retrieve/change data in an SQLite database|https://edwardtanguay.vercel.app/howtos?id=574",
			"todoList": "",
			"hasAnimation": true
		},
		{
			"id": 7,
			"idCode": "frontBackMernCrudLowdbPin",
			"title": "Frontend/Backend MERN CRUD app with Lowdb and PIN authentication",
			"description": "This is a fullstack MERN frontend/backend example app which has all the moving parts for you to deploy an application online to e.g. Hetzner which allows users who know the admin PIN to edit, delete and add new items online. This is a good basis to study, learn and use if you have React/Node/Express skills but not yet database or auth security skills. It has everything you need to publish an online website in which users can identify themselves and change content online. Note that if you want to build a job-application management app, this is a useful basis which can be used as is. Otherwise you will have to replace the content with your own.",
			"featureMarkdown": "- **frontend:** Vite/React with Sass, TypeScript and ES6 modules\n- **backend:** Node/Express with TypeScript and ES6 modules\n- **database:** [Lowdb](https://www.npmjs.com/package/lowdb) (one JSON file in backend)\n- **authentication:** simple PIN which is an environment variable in the backend, i.e. all POST/PATCH/DELETE backend routes are protected\n- **toastify notifications**: easy-to-implement app messages that pop out with animation in e.g. upper-right-hand corner, see [react-toastify](https://www.npmjs.com/package/react-toastify)",
			"githubUrl": "https://github.com/edwardtanguay/getajob007-frontend",
			"githubUrl2": "https://github.com/edwardtanguay/getajob007-backend",
			"installMarkdown": "## install\n\n- go to your projects directory\n- create a directory called `getajob`\n\n## install backend\n\n- go to your projects directory\n- `cd getajob`\n- `git clone git@github.com:edwardtanguay/getajob007-backend.git`\n- `npm i`\n- create **.env** file\n\n```text\nPORT = 3001\nPIN = 1234\n```\n\n- `npm run dev`\n\n## install frontend\n\n- go to your projects directory\n- `cd getajob`\n- `git clone git@github.com:edwardtanguay/getajob007-frontend.git`\n- `npm i`\n- create **.env** file\n\n```text\nVITE_BACKEND_URL = http://localhost:3001\n```\n\n- `npm run dev`",
			"demoUrl": "https://getajob007.tanguay.eu",
			"updowngradeList": "",
			"learningMaterialList": "",
			"todoList": "",
			"hasAnimation": true
		},
		{
			"id": 8,
			"idCode": "reactNodeSimpleApi",
			"title": "React frontend with simple Node/Express API backend",
			"description": "This is the minimal starting point for a basic React-frontend with Node/Express-backend. Frontend is Vite React with Sass, React Router, useContext and a CLI command to create pages (`npm run cp`), while the backend is a minimal Node/Express but with a simple MVC structure with server.ts which calls a function in model.ts. This is a good project if you want to build a multi-page application that has a backend that serves it data.",
			"featureMarkdown": "- **frontend:** \n  - Vite/React \n  - Sass\n  - TypeScript\n  - ES6 modules\n  - React Router\n  - useContext\n- **backend:** \n  - Node/Express \n  - TypeScript \n  - ES6 modules\n  - simple MVC Structure (`server.ts`/`model.ts`)",
			"githubUrl": "https://github.com/edwardtanguay/react-node-simple-api-frontend",
			"githubUrl2": "https://github.com/edwardtanguay/react-node-simple-api-backend",
			"installMarkdown": "## install\n\n- go to your projects directory\n- create a directory called `site001`\n\n## install backend\n\n- go to your projects directory\n- `cd site001`\n- `git clone git@github.com:edwardtanguay/react-node-simple-api-backend.git site001-backend`\n- `npm i`\n- `npm run dev`\n\n## install frontend\n\n- go to your projects directory\n- `cd site001`\n- `git clone git@github.com:edwardtanguay/react-node-simple-api-frontend.git site001-frontend`\n- `npm i`\n- `npm run dev`",
			"demoUrl": "",
			"updowngradeList": "add authentication|reactNodeSimpleAdminAuth",
			"learningMaterialList": "",
			"todoList": "",
			"hasAnimation": false
		},
		{
			"id": 9,
			"idCode": "reactNodeSimpleAdminAuth",
			"title": "React/Node/Express frontend/backend with admin authentication",
			"description": "This is the minimal starting point for a basic React-frontend with Node/Express-backend with has authentication. Use this starter if you plan to create a backend that has POST, PUT, PATCH or DELETE routes which you need to protect on your backend and need to be able to allow a user on the frontend to log log in with password in order to access those routes. Authentication is done with session/cookies and kept as simple as possible, i.e. only one user (admin) can log in who then has admin rights on the front and backend for a specific amount of time, set at 10 seconds in order to test it first. The admin is able to edit a welcome message which in the backend is stored in a text file, so there is no database set up. You'll have to delete what you don't need and add what you need, but quite a bit of configuration and implementation details is set up for you on as boilerplate that works. Frontend is Vite React with Sass, React Router, useContext and a CLI command to create pages (`npm run cp`), while the backend is a minimal Node/Express but with a simple MVC structure with `server.ts` which calls a corresponding function in `model.ts`. This is a good project if you want to build a multi-page application that has CRUD operations and will be hosted online.",
			"featureMarkdown": "\n- **frontend:** \n  - Vite/React \n  - Sass\n  - TypeScript\n  - ES6 modules\n  - React Router\n  - useContext\n  - admin login with password\n- **backend:** \n  - Node/Express \n  - TypeScript \n  - ES6 modules\n  - simple MVC Structure (`server.ts`/`model.ts`)\n  - cookie/session authentication",
			"githubUrl": "https://github.com/edwardtanguay/react-node-simple-admin-auth-frontend",
			"githubUrl2": "https://github.com/edwardtanguay/react-node-simple-admin-auth-backend",
			"installMarkdown": "## install\n\n- go to your projects directory\n- create a directory called `site001`\n\n## install backend\n\n- go to your projects directory\n- `cd site001`\n- `git clone git@github.com:edwardtanguay/react-node-simple-admin-auth-backend.git site001-backend`\n- `npm i`\n- `npm run dev`\n\n## install frontend\n\n- go to your projects directory\n- `cd site001`\n- `git clone git@github.com:edwardtanguay/react-node-simple-admin-auth-backend.git site001-frontend`\n- `npm i`\n- `npm run dev`",
			"demoUrl": "",
			"updowngradeList": "remove authentication|reactNodeSimpleApi",
			"learningMaterialList": "",
			"todoList": "",
			"hasAnimation": true
		},
		{
			"id": 10,
			"idCode": "fullstackReactSqliteCrud",
			"title": "Fullstack React frontend which adds/edits/deletes items in backend SQLite CRUD API",
			"description": "This is the starting point for the simplest fullstack CRUD site that has a database. There is a React-frontend which allows the user to view, edit, delete and add flashcards, which are saved via a Node/Express-backend to an SQLite database (a `db.sqlite` file on the backend. The authentication is simply an admin password stored in an `.env` file in the backend. So there is only one user (admin) which logs in simply by typing a password on the frontend, and if correct, can edit/delete/add flashcard items. The UX is quite advanced: animated toaster notifications, forms allow Enter to save, forms appear with cursors focused in the first input field, and all access to backend will gracefully fail if there is a network error, e.g. if you stop the backend, the site will show a spinner for two seconds before displaying a message that the database is currently unavailable. All connection to the backend is done in useContext fo course. This is a good project if you want to build a fullstack application which has quite copmlete UX and frontend/backend communication, would be e.g. easy to swap out the SQLite database for MySQL, Postgres, MongoDB or even a Lowdb JSON file.",
			"featureMarkdown": "- **frontend:** \n\t- Vite/React \n\t- Sass\n\t- TypeScript\n\t- ES6 modules\n\t- React Router\n\t- useContext\n\t- admin login with password\n\t- [react-toastify](https://www.npmjs.com/package/react-toastify) notifications\n\t- UX features:\n\t\t- forms have automatically focused cursors\n\t\t- in forms, Enter means Save\n\t\t- graceful fail on network error (when backend not present)\n- **backend:** \n\t- Node/Express \n\t- TypeScript \n\t- ES6 modules\n\t- simple MVC structure (`server.ts`/`model.ts`)\n\t- cookie/session authentication\n\t- SQLite database (file: `data/db.sqlite`)",
			"githubUrl": "https://github.com/edwardtanguay/fullstack-react-sqlite-crud-frontend",
			"githubUrl2": "https://github.com/edwardtanguay/fullstack-react-sqlite-crud-backend",
			"installMarkdown": "## install\n\n- open your terminal\n- create a directory for this project, e.g.\n\t- `mkdir site001`\n\n## install backend\n\n- enter your project directory\n\t- `cd site001`\n- create backend directory\n\t- `git clone git@github.com:edwardtanguay/react-node-simple-admin-auth-backend.git site001-backend`\n- open VSCode in the backend directory\n\t- `code site001-backend`\n- open VSCode terminal\n- delete old and create new Git repository\n\t- `rm -rf .git`\n\t- `git npm -b main`\n\t- make initial commit\n- create `.env` file with **any random characters** for the session secret, and an **admin password** you can remember\n\t----------------------------\n\tSESSION_SECRET = ksks2374skjdf\n\tADMIN_PASSWORD = pass828\n\t----------------------------\n- install node_modules\n\t- `npm i`\n- start the backend\n\t- `npm run dev`\n- open API in browser\n\t- click url in terminal\n- to distinguish your backend VSCode from your frontend VSCode, set VSCode frame to \"**b**lue for **b**ackend)\n\t- you need the [VSCode Peacock extension](https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock)\n\t- **F1**\n\t- \"Peacock: Enter a Color\"\n\t- `navy`\n\n## install frontend\n\n- enter your project directory\n\t- `cd site001`\n- create frontend directory\n\t- `git clone git@github.com:edwardtanguay/react-node-simple-admin-auth-frontend.git site001-frontend`\n- open VSCode in the frontend directory\n\t- `code site001-frontend`\n- open VSCode terminal\n- delete old and create new Git repository\n\t- `rm -rf .git`\n\t- `git npm -b main`\n\t- make initial commit\n- no `.env` file is necessary for the frontend\n- install node_modules\n\t- `npm i`\n- start the backend\n\t- `npm run dev`\n- open in browser\n\t- click url in terminal\n- to distinguish your backend VSCode from your backend VSCode, set VSCode frame to \"**f**uchsia for **f**rontend)\n\t- you need the [VSCode Peacock extension](https://marketplace.visualstudio.com/items?itemName=johnpapa.vscode-peacock)\n\t- **F1**\n\t- \"Peacock: Enter a Color\"\n\t- `purple`",
			"demoUrl": "",
			"updowngradeList": "",
			"learningMaterialList": "",
			"todoList": "",
			"hasAnimation": false
		}
	]
}
